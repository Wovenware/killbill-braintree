/*
 * Copyright 2021 Wovenware, Inc
 *
 * Wovenware licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package org.killbill.billing.plugin.braintree.dao.gen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.killbill.billing.plugin.braintree.dao.gen.Indexes;
import org.killbill.billing.plugin.braintree.dao.gen.Keys;
import org.killbill.billing.plugin.braintree.dao.gen.Killbill;
import org.killbill.billing.plugin.braintree.dao.gen.tables.records.BraintreePaymentMethodsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BraintreePaymentMethods extends TableImpl<BraintreePaymentMethodsRecord> {

    private static final long serialVersionUID = 294751640;

    /**
     * The reference instance of <code>killbill.braintree_payment_methods</code>
     */
    public static final BraintreePaymentMethods BRAINTREE_PAYMENT_METHODS = new BraintreePaymentMethods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BraintreePaymentMethodsRecord> getRecordType() {
        return BraintreePaymentMethodsRecord.class;
    }

    /**
     * The column <code>killbill.braintree_payment_methods.record_id</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, ULong> RECORD_ID = createField(DSL.name("record_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.kb_account_id</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, String> KB_ACCOUNT_ID = createField(DSL.name("kb_account_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.kb_payment_method_id</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, String> KB_PAYMENT_METHOD_ID = createField(DSL.name("kb_payment_method_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.braintree_id</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, String> BRAINTREE_ID = createField(DSL.name("braintree_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.is_default</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, Short> IS_DEFAULT = createField(DSL.name("is_default"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.is_deleted</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, Short> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.additional_data</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, String> ADDITIONAL_DATA = createField(DSL.name("additional_data"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.created_date</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.updated_date</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, LocalDateTime> UPDATED_DATE = createField(DSL.name("updated_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_payment_methods.kb_tenant_id</code>.
     */
    public final TableField<BraintreePaymentMethodsRecord, String> KB_TENANT_ID = createField(DSL.name("kb_tenant_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * Create a <code>killbill.braintree_payment_methods</code> table reference
     */
    public BraintreePaymentMethods() {
        this(DSL.name("braintree_payment_methods"), null);
    }

    /**
     * Create an aliased <code>killbill.braintree_payment_methods</code> table reference
     */
    public BraintreePaymentMethods(String alias) {
        this(DSL.name(alias), BRAINTREE_PAYMENT_METHODS);
    }

    /**
     * Create an aliased <code>killbill.braintree_payment_methods</code> table reference
     */
    public BraintreePaymentMethods(Name alias) {
        this(alias, BRAINTREE_PAYMENT_METHODS);
    }

    private BraintreePaymentMethods(Name alias, Table<BraintreePaymentMethodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BraintreePaymentMethods(Name alias, Table<BraintreePaymentMethodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BraintreePaymentMethods(Table<O> child, ForeignKey<O, BraintreePaymentMethodsRecord> key) {
        super(child, key, BRAINTREE_PAYMENT_METHODS);
    }

    @Override
    public Schema getSchema() {
        return Killbill.KILLBILL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BRAINTREE_PAYMENT_METHODS_BRAINTREE_PAYMENT_METHODS_BRAINTREE_ID);
    }

    @Override
    public Identity<BraintreePaymentMethodsRecord, ULong> getIdentity() {
        return Keys.IDENTITY_BRAINTREE_PAYMENT_METHODS;
    }

    @Override
    public UniqueKey<BraintreePaymentMethodsRecord> getPrimaryKey() {
        return Keys.KEY_BRAINTREE_PAYMENT_METHODS_PRIMARY;
    }

    @Override
    public List<UniqueKey<BraintreePaymentMethodsRecord>> getKeys() {
        return Arrays.<UniqueKey<BraintreePaymentMethodsRecord>>asList(Keys.KEY_BRAINTREE_PAYMENT_METHODS_PRIMARY, Keys.KEY_BRAINTREE_PAYMENT_METHODS_RECORD_ID, Keys.KEY_BRAINTREE_PAYMENT_METHODS_BRAINTREE_PAYMENT_METHODS_KB_PAYMENT_ID);
    }

    @Override
    public BraintreePaymentMethods as(String alias) {
        return new BraintreePaymentMethods(DSL.name(alias), this);
    }

    @Override
    public BraintreePaymentMethods as(Name alias) {
        return new BraintreePaymentMethods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BraintreePaymentMethods rename(String name) {
        return new BraintreePaymentMethods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BraintreePaymentMethods rename(Name name) {
        return new BraintreePaymentMethods(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, String, String, String, Short, Short, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
