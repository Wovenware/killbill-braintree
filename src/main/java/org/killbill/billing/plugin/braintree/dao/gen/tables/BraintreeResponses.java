/*
 * Copyright 2021 Wovenware, Inc
 *
 * Wovenware licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package org.killbill.billing.plugin.braintree.dao.gen.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.killbill.billing.plugin.braintree.dao.gen.Indexes;
import org.killbill.billing.plugin.braintree.dao.gen.Keys;
import org.killbill.billing.plugin.braintree.dao.gen.Killbill;
import org.killbill.billing.plugin.braintree.dao.gen.tables.records.BraintreeResponsesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BraintreeResponses extends TableImpl<BraintreeResponsesRecord> {

    private static final long serialVersionUID = 604328055;

    /**
     * The reference instance of <code>killbill.braintree_responses</code>
     */
    public static final BraintreeResponses BRAINTREE_RESPONSES = new BraintreeResponses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BraintreeResponsesRecord> getRecordType() {
        return BraintreeResponsesRecord.class;
    }

    /**
     * The column <code>killbill.braintree_responses.record_id</code>.
     */
    public final TableField<BraintreeResponsesRecord, ULong> RECORD_ID = createField(DSL.name("record_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>killbill.braintree_responses.kb_account_id</code>.
     */
    public final TableField<BraintreeResponsesRecord, String> KB_ACCOUNT_ID = createField(DSL.name("kb_account_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_responses.kb_payment_id</code>.
     */
    public final TableField<BraintreeResponsesRecord, String> KB_PAYMENT_ID = createField(DSL.name("kb_payment_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_responses.kb_payment_transaction_id</code>.
     */
    public final TableField<BraintreeResponsesRecord, String> KB_PAYMENT_TRANSACTION_ID = createField(DSL.name("kb_payment_transaction_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_responses.transaction_type</code>.
     */
    public final TableField<BraintreeResponsesRecord, String> TRANSACTION_TYPE = createField(DSL.name("transaction_type"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_responses.amount</code>.
     */
    public final TableField<BraintreeResponsesRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.DECIMAL(15, 9).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>killbill.braintree_responses.currency</code>.
     */
    public final TableField<BraintreeResponsesRecord, String> CURRENCY = createField(DSL.name("currency"), org.jooq.impl.SQLDataType.CHAR(3).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>killbill.braintree_responses.braintree_id</code>.
     */
    public final TableField<BraintreeResponsesRecord, String> BRAINTREE_ID = createField(DSL.name("braintree_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_responses.additional_data</code>.
     */
    public final TableField<BraintreeResponsesRecord, String> ADDITIONAL_DATA = createField(DSL.name("additional_data"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>killbill.braintree_responses.created_date</code>.
     */
    public final TableField<BraintreeResponsesRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>killbill.braintree_responses.kb_tenant_id</code>.
     */
    public final TableField<BraintreeResponsesRecord, String> KB_TENANT_ID = createField(DSL.name("kb_tenant_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * Create a <code>killbill.braintree_responses</code> table reference
     */
    public BraintreeResponses() {
        this(DSL.name("braintree_responses"), null);
    }

    /**
     * Create an aliased <code>killbill.braintree_responses</code> table reference
     */
    public BraintreeResponses(String alias) {
        this(DSL.name(alias), BRAINTREE_RESPONSES);
    }

    /**
     * Create an aliased <code>killbill.braintree_responses</code> table reference
     */
    public BraintreeResponses(Name alias) {
        this(alias, BRAINTREE_RESPONSES);
    }

    private BraintreeResponses(Name alias, Table<BraintreeResponsesRecord> aliased) {
        this(alias, aliased, null);
    }

    private BraintreeResponses(Name alias, Table<BraintreeResponsesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BraintreeResponses(Table<O> child, ForeignKey<O, BraintreeResponsesRecord> key) {
        super(child, key, BRAINTREE_RESPONSES);
    }

    @Override
    public Schema getSchema() {
        return Killbill.KILLBILL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BRAINTREE_RESPONSES_BRAINTREE_RESPONSES_BRAINTREE_ID, Indexes.BRAINTREE_RESPONSES_BRAINTREE_RESPONSES_KB_PAYMENT_ID, Indexes.BRAINTREE_RESPONSES_BRAINTREE_RESPONSES_KB_PAYMENT_TRANSACTION_ID);
    }

    @Override
    public Identity<BraintreeResponsesRecord, ULong> getIdentity() {
        return Keys.IDENTITY_BRAINTREE_RESPONSES;
    }

    @Override
    public UniqueKey<BraintreeResponsesRecord> getPrimaryKey() {
        return Keys.KEY_BRAINTREE_RESPONSES_PRIMARY;
    }

    @Override
    public List<UniqueKey<BraintreeResponsesRecord>> getKeys() {
        return Arrays.<UniqueKey<BraintreeResponsesRecord>>asList(Keys.KEY_BRAINTREE_RESPONSES_PRIMARY, Keys.KEY_BRAINTREE_RESPONSES_RECORD_ID);
    }

    @Override
    public BraintreeResponses as(String alias) {
        return new BraintreeResponses(DSL.name(alias), this);
    }

    @Override
    public BraintreeResponses as(Name alias) {
        return new BraintreeResponses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BraintreeResponses rename(String name) {
        return new BraintreeResponses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BraintreeResponses rename(Name name) {
        return new BraintreeResponses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, String, String, String, String, BigDecimal, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
